@page "/customer-dashboard/{customerId:int}"
@using BankBlazor.Client.ViewModels
@inject HttpClient HttpClient

<div class="container my-5">
    <div class="row">
        <div class="col-md-4">
            <div class="card p-3 shadow-sm">
                <h4>My Profile</h4>
                <p><strong>Name:</strong> @CustomerDetailsViewModel.Givenname @CustomerDetailsViewModel.Surname</p>
                <p><strong>Email:</strong> @CustomerDetailsViewModel.Emailaddress</p>
                <p><strong>City:</strong> @CustomerDetailsViewModel.City</p>
                <p><strong>Country:</strong> @CustomerDetailsViewModel.Country</p>
            </div>
        </div>

        <div class="col-md-8">
            <h4>My Accounts</h4>
            <div class="row">
                @foreach (var account in CustomerDetailsViewModel.Accounts)
                {
                    <div class="col-md-6 mb-3">
                        <div class="card p-3 shadow-sm">
                            <h5>Account ID: @account.AccountId</h5>
                            <p><strong>Balance:</strong> @account.Balance.ToString("C")</p>
                            <p><strong>Frequency:</strong> @account.Frequency</p>
                            <p><strong>Created:</strong> @account.Created.ToShortDateString()</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="mt-5">
        <h4>Transaction History</h4>
       
        <div class="card p-3 shadow-sm">
            @if (Transactions == null)
            {
                <p>Loading transactions...</p>
            }
            else if (!Transactions.Any())
            {
                <p>No transactions found for this customer.</p>
            }
            else
            {
                <table class="table table-bordered table-striped mt-3">
                    <thead class="table-dark">
                        <tr>
                            <th>Date</th>
                            <th>Account ID</th>
                            <th>Type</th>
                            <th>Operation</th>
                            <th>Amount</th>
                            <th>Balance</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var transaction in Transactions)
                        {
                            <tr>
                                <td>@transaction.Date.ToShortDateString()</td>
                                <td>@transaction.AccountId</td>
                                <td>@transaction.Type</td>
                                <td>@transaction.Operation</td>
                                <td>@transaction.Amount.ToString("C")</td>
                                <td>@transaction.Balance.ToString("C")</td>
                            </tr>
                        }
                    </tbody>
                    <div class="text-end">
                        <NavLink class="btn btn-sm btn-outline-primary" href=@($"/customer/all-transactions/{CustomerDetailsViewModel.CustomerId}")>View full history</NavLink>
                    </div>
                </table>
            }
        </div>

        <div class="text-center mt-3">
            <NavLink class="btn btn-primary" href="/make-transfer">Make a New Transfer</NavLink>
        </div>
    </div>
</div>

@code {
    public CustomerDetailsViewModel? CustomerDetailsViewModel { get; set; }
    public List<TransactionReadViewModel> Transactions { get; set; } = new();

    [Parameter]
    public int customerId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetCustomerDetails();
        await LoadTransactions();
    }

    private async Task GetCustomerDetails()
    {
        if (customerId > 0)
        {
            try
            {
                var request = new HttpRequestMessage(HttpMethod.Get, $"https://localhost:7127/api/customer/{customerId}/accounts");
                using (var response = await HttpClient.SendAsync(request))
                {
                    response.EnsureSuccessStatusCode();
                    var body = await response.Content.ReadAsStringAsync();
                    CustomerDetailsViewModel = JsonConvert.DeserializeObject<CustomerDetailsViewModel>(body);
                }
            }
            catch (Exception ex)
            {
                ex.Message.ToString();
            }
        }
    }
    private async Task LoadTransactions()
    {
        try
        {
            var allTransactions = await HttpClient.GetFromJsonAsync<List<TransactionReadViewModel>>(
            $"https://localhost:7127/api/transaction/customer/{customerId}");

            Transactions = allTransactions?
                .OrderByDescending(t => t.Date)
                .Take(5)
                .ToList() ?? new();
        }
        catch (Exception ex)
        {
            Console.WriteLine("Failed to load transactions: " + ex.Message);
        }
    }
}
