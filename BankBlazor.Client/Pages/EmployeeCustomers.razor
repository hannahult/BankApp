@page "/employee/customers"
@using BankBlazor.Client.ViewModels
@using System.Net.Http.Json
@using Newtonsoft.Json
@inject HttpClient http

<div class="list-container">
    <h2 class="list-title">All Customers</h2>

@if (isLoading)
{
    <div class="loading-progress">
        <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="45" />
            <circle cx="50" cy="50" r="45" />
        </svg>
    </div>
    <div class="loading-progress-text">Loading...</div>
}
else if (!PagedCustomers.Any())
{
    <p>No customers found.</p>
}
else
{
        <table class="table table-hover">
            <thead class="table-light">
            <tr>
                <th>ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Phone</th>
                <th>Address</th>
                <th>City</th>
                <th>Country</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var c in PagedCustomers)
            {
                <tr>
                    <td>@c.CustomerId</td>
                    <td>@c.Givenname @c.Surname</td>
                    <td>@c.Emailaddress</td>
                    <td>@($"{c.Telephonenumber}")</td>
                    <td>@c.Streetaddress</td>
                    <td>@c.City</td>
                    <td>@c.Country</td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
    </div>
    }
</div>

@code {
    private List<CustomerReadViewModel> PagedCustomers = new();
    private int currentPage = 1;
    private int pageSize = 50;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadCustomers();
    }

    private async Task LoadCustomers()
    {
        isLoading = true;
        StateHasChanged();

        try
        {
            var response = await http.GetAsync(
      $"https://localhost:7127/api/customer/paged?pageNumber={currentPage}&pageSize={pageSize}");

            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                var result = JsonConvert.DeserializeObject<PagedResult<CustomerReadViewModel>>(json);

                if (result != null)
                {
                    PagedCustomers = result.Items;
                    totalItems = result.TotalCount;
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine("Error loading paged customers: " + ex.Message);
        }

        isLoading = false;
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadCustomers();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadCustomers();
        }
    }
}