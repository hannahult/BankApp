@page "/employee/accounts"
@inject HttpClient HttpClient
@using BankBlazor.Client.ViewModels

<div class="list-container">
    <h2 class="list-title">All Accounts</h2>

@if (isLoading)
{
    <div class="loading-progress">
        <svg viewBox="0 0 100 100">
            <circle cx="50" cy="50" r="45" />
            <circle cx="50" cy="50" r="45" />
        </svg>
    </div>
    <div class="loading-progress-text">Loading...</div>
}
else if (!PagedAccounts.Any())
{
    <p>No accounts found.</p>
}
else
{
    <table class="table table-hover">
        <thead class="table-light">
            <tr>
                <th>Account ID</th>
                <th>Balance</th>
                <th>Frequency</th>
                <th>Created</th>
                <th> </th> 
            </tr>
        </thead>
        <tbody>
            @foreach (var a in PagedAccounts)
            {
                <tr>
                    <td>@a.AccountId</td>
                    <td>@a.Balance.ToString("C")</td>
                    <td>@a.Frequency</td>
                    <td>@a.Created.ToShortDateString()</td>
                    <td>
                        <NavLink class="btn btn-outline-info btn-sm" href=@($"/accounts/{a.AccountId}/transactions")>
                            View Transactions
                        </NavLink>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="d-flex justify-content-between align-items-center mt-4">
        <button class="btn btn-outline-primary" @onclick="PreviousPage" disabled="@(currentPage == 1)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-outline-primary" @onclick="NextPage" disabled="@(currentPage == totalPages)">Next</button>
    </div>
}
</div>

@code {
    private List<AccountReadViewModel> PagedAccounts = new();
    private int currentPage = 1;
    private int pageSize = 20;
    private int totalItems;
    private int totalPages => (int)Math.Ceiling((double)totalItems / pageSize);
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadAccounts();
    }

    private async Task LoadAccounts()
    {
        isLoading = true;
        StateHasChanged();

        var result = await HttpClient.GetFromJsonAsync<PagedResult<AccountReadViewModel>>(
            $"https://localhost:7127/api/account/paged?pageNumber={currentPage}&pageSize={pageSize}");

        if (result != null)
        {
            PagedAccounts = result.Items;
            totalItems = result.TotalCount;
        }

        isLoading = false;
    }

    private async Task NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            await LoadAccounts();
        }
    }

    private async Task PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await LoadAccounts();
        }
    }
}